// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR REQ_ENTER::REQ_ENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct REQ_ENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR REQ_ENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~REQ_ENTERDefaultTypeInternal() {}
  union {
    REQ_ENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 REQ_ENTERDefaultTypeInternal _REQ_ENTER_default_instance_;
PROTOBUF_CONSTEXPR RES_ENTER::RES_ENTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_ENTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_ENTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_ENTERDefaultTypeInternal() {}
  union {
    RES_ENTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_ENTERDefaultTypeInternal _RES_ENTER_default_instance_;
PROTOBUF_CONSTEXPR REQ_ENTER_ROOM::REQ_ENTER_ROOM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct REQ_ENTER_ROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR REQ_ENTER_ROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~REQ_ENTER_ROOMDefaultTypeInternal() {}
  union {
    REQ_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 REQ_ENTER_ROOMDefaultTypeInternal _REQ_ENTER_ROOM_default_instance_;
PROTOBUF_CONSTEXPR RES_ENTER_ROOM::RES_ENTER_ROOM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_ENTER_ROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_ENTER_ROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_ENTER_ROOMDefaultTypeInternal() {}
  union {
    RES_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_ENTER_ROOMDefaultTypeInternal _RES_ENTER_ROOM_default_instance_;
PROTOBUF_CONSTEXPR REQ_LEAVE::REQ_LEAVE(
    ::_pbi::ConstantInitialized) {}
struct REQ_LEAVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR REQ_LEAVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~REQ_LEAVEDefaultTypeInternal() {}
  union {
    REQ_LEAVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 REQ_LEAVEDefaultTypeInternal _REQ_LEAVE_default_instance_;
PROTOBUF_CONSTEXPR RES_LEAVE::RES_LEAVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_LEAVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_LEAVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_LEAVEDefaultTypeInternal() {}
  union {
    RES_LEAVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_LEAVEDefaultTypeInternal _RES_LEAVE_default_instance_;
PROTOBUF_CONSTEXPR RES_SPAWN::RES_SPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.mine_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_SPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_SPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_SPAWNDefaultTypeInternal() {}
  union {
    RES_SPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_SPAWNDefaultTypeInternal _RES_SPAWN_default_instance_;
PROTOBUF_CONSTEXPR RES_SPAWN_ALL::RES_SPAWN_ALL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_SPAWN_ALLDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_SPAWN_ALLDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_SPAWN_ALLDefaultTypeInternal() {}
  union {
    RES_SPAWN_ALL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_SPAWN_ALLDefaultTypeInternal _RES_SPAWN_ALL_default_instance_;
PROTOBUF_CONSTEXPR RES_DESPAWN::RES_DESPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_DESPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_DESPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_DESPAWNDefaultTypeInternal() {}
  union {
    RES_DESPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_DESPAWNDefaultTypeInternal _RES_DESPAWN_default_instance_;
PROTOBUF_CONSTEXPR RES_CHANGE_HP::RES_CHANGE_HP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectid_)*/uint64_t{0u}
  , /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_CHANGE_HPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_CHANGE_HPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_CHANGE_HPDefaultTypeInternal() {}
  union {
    RES_CHANGE_HP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_CHANGE_HPDefaultTypeInternal _RES_CHANGE_HP_default_instance_;
PROTOBUF_CONSTEXPR RES_DIE::RES_DIE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectid_)*/uint64_t{0u}
  , /*decltype(_impl_.attacker_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_DIEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_DIEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_DIEDefaultTypeInternal() {}
  union {
    RES_DIE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_DIEDefaultTypeInternal _RES_DIE_default_instance_;
PROTOBUF_CONSTEXPR REQ_MOVE::REQ_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct REQ_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR REQ_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~REQ_MOVEDefaultTypeInternal() {}
  union {
    REQ_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 REQ_MOVEDefaultTypeInternal _REQ_MOVE_default_instance_;
PROTOBUF_CONSTEXPR RES_MOVE::RES_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_MOVEDefaultTypeInternal() {}
  union {
    RES_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_MOVEDefaultTypeInternal _RES_MOVE_default_instance_;
PROTOBUF_CONSTEXPR RES_SPAWN_MONSTER::RES_SPAWN_MONSTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monsters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_SPAWN_MONSTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_SPAWN_MONSTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_SPAWN_MONSTERDefaultTypeInternal() {}
  union {
    RES_SPAWN_MONSTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_SPAWN_MONSTERDefaultTypeInternal _RES_SPAWN_MONSTER_default_instance_;
PROTOBUF_CONSTEXPR RES_MOVE_MONSTER::RES_MOVE_MONSTER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monster_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_MOVE_MONSTERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_MOVE_MONSTERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_MOVE_MONSTERDefaultTypeInternal() {}
  union {
    RES_MOVE_MONSTER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_MOVE_MONSTERDefaultTypeInternal _RES_MOVE_MONSTER_default_instance_;
PROTOBUF_CONSTEXPR REQ_ATTACK_OBJECT::REQ_ATTACK_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attacker_)*/uint64_t{0u}
  , /*decltype(_impl_.objectid_)*/uint64_t{0u}
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct REQ_ATTACK_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR REQ_ATTACK_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~REQ_ATTACK_OBJECTDefaultTypeInternal() {}
  union {
    REQ_ATTACK_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 REQ_ATTACK_OBJECTDefaultTypeInternal _REQ_ATTACK_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR RES_ATTACK_OBJECT::RES_ATTACK_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attacker_)*/uint64_t{0u}
  , /*decltype(_impl_.objectid_)*/uint64_t{0u}
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_.remainhp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RES_ATTACK_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RES_ATTACK_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RES_ATTACK_OBJECTDefaultTypeInternal() {}
  union {
    RES_ATTACK_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RES_ATTACK_OBJECTDefaultTypeInternal _RES_ATTACK_OBJECT_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[17];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_ENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_ENTER, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ENTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ENTER, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ENTER, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_ENTER_ROOM, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ENTER_ROOM, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ENTER_ROOM, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_LEAVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_LEAVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_LEAVE, _impl_.object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_SPAWN, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_SPAWN, _impl_.mine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_SPAWN_ALL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_SPAWN_ALL, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_DESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_DESPAWN, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_CHANGE_HP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_CHANGE_HP, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_CHANGE_HP, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_DIE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_DIE, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_DIE, _impl_.attacker_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_MOVE, _impl_.info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_MOVE, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_SPAWN_MONSTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_SPAWN_MONSTER, _impl_.monsters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_MOVE_MONSTER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_MOVE_MONSTER, _impl_.monster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_ATTACK_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_ATTACK_OBJECT, _impl_.attacker_),
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_ATTACK_OBJECT, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::REQ_ATTACK_OBJECT, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ATTACK_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ATTACK_OBJECT, _impl_.attacker_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ATTACK_OBJECT, _impl_.objectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ATTACK_OBJECT, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::RES_ATTACK_OBJECT, _impl_.remainhp_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::REQ_ENTER)},
  { 7, -1, -1, sizeof(::Protocol::RES_ENTER)},
  { 15, -1, -1, sizeof(::Protocol::REQ_ENTER_ROOM)},
  { 22, -1, -1, sizeof(::Protocol::RES_ENTER_ROOM)},
  { 30, -1, -1, sizeof(::Protocol::REQ_LEAVE)},
  { 36, -1, -1, sizeof(::Protocol::RES_LEAVE)},
  { 43, -1, -1, sizeof(::Protocol::RES_SPAWN)},
  { 51, -1, -1, sizeof(::Protocol::RES_SPAWN_ALL)},
  { 58, -1, -1, sizeof(::Protocol::RES_DESPAWN)},
  { 65, -1, -1, sizeof(::Protocol::RES_CHANGE_HP)},
  { 73, -1, -1, sizeof(::Protocol::RES_DIE)},
  { 81, -1, -1, sizeof(::Protocol::REQ_MOVE)},
  { 88, -1, -1, sizeof(::Protocol::RES_MOVE)},
  { 95, -1, -1, sizeof(::Protocol::RES_SPAWN_MONSTER)},
  { 102, -1, -1, sizeof(::Protocol::RES_MOVE_MONSTER)},
  { 109, -1, -1, sizeof(::Protocol::REQ_ATTACK_OBJECT)},
  { 118, -1, -1, sizeof(::Protocol::RES_ATTACK_OBJECT)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_REQ_ENTER_default_instance_._instance,
  &::Protocol::_RES_ENTER_default_instance_._instance,
  &::Protocol::_REQ_ENTER_ROOM_default_instance_._instance,
  &::Protocol::_RES_ENTER_ROOM_default_instance_._instance,
  &::Protocol::_REQ_LEAVE_default_instance_._instance,
  &::Protocol::_RES_LEAVE_default_instance_._instance,
  &::Protocol::_RES_SPAWN_default_instance_._instance,
  &::Protocol::_RES_SPAWN_ALL_default_instance_._instance,
  &::Protocol::_RES_DESPAWN_default_instance_._instance,
  &::Protocol::_RES_CHANGE_HP_default_instance_._instance,
  &::Protocol::_RES_DIE_default_instance_._instance,
  &::Protocol::_REQ_MOVE_default_instance_._instance,
  &::Protocol::_RES_MOVE_default_instance_._instance,
  &::Protocol::_RES_SPAWN_MONSTER_default_instance_._instance,
  &::Protocol::_RES_MOVE_MONSTER_default_instance_._instance,
  &::Protocol::_REQ_ATTACK_OBJECT_default_instance_._instance,
  &::Protocol::_RES_ATTACK_OBJECT_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\"\031\n\tREQ_ENTER\022\014\n\004name\030\001 \001(\t\""
  "B\n\tRES_ENTER\022$\n\006player\030\001 \001(\0132\024.Protocol."
  "ObjectInfo\022\017\n\007success\030\002 \001(\010\"\036\n\016REQ_ENTER"
  "_ROOM\022\014\n\004name\030\001 \001(\t\"G\n\016RES_ENTER_ROOM\022$\n"
  "\006player\030\001 \001(\0132\024.Protocol.ObjectInfo\022\017\n\007s"
  "uccess\030\002 \001(\010\"\013\n\tREQ_LEAVE\"1\n\tRES_LEAVE\022$"
  "\n\006object\030\001 \001(\0132\024.Protocol.ObjectInfo\"\?\n\t"
  "RES_SPAWN\022$\n\006player\030\001 \001(\0132\024.Protocol.Obj"
  "ectInfo\022\014\n\004mine\030\002 \001(\010\"6\n\rRES_SPAWN_ALL\022%"
  "\n\007players\030\001 \003(\0132\024.Protocol.ObjectInfo\"\032\n"
  "\013RES_DESPAWN\022\013\n\003ids\030\001 \003(\004\"-\n\rRES_CHANGE_"
  "HP\022\020\n\010objectId\030\001 \001(\004\022\n\n\002hp\030\002 \001(\r\"-\n\007RES_"
  "DIE\022\020\n\010objectId\030\001 \001(\004\022\020\n\010attacker\030\002 \001(\004\""
  "0\n\010REQ_MOVE\022$\n\004info\030\001 \001(\0132\026.Protocol.Pos"
  "itionInfo\"0\n\010RES_MOVE\022$\n\006player\030\001 \001(\0132\024."
  "Protocol.ObjectInfo\";\n\021RES_SPAWN_MONSTER"
  "\022&\n\010monsters\030\001 \003(\0132\024.Protocol.ObjectInfo"
  "\"9\n\020RES_MOVE_MONSTER\022%\n\007monster\030\001 \001(\0132\024."
  "Protocol.ObjectInfo\"G\n\021REQ_ATTACK_OBJECT"
  "\022\020\n\010attacker\030\001 \001(\004\022\020\n\010objectId\030\002 \001(\004\022\016\n\006"
  "damage\030\003 \001(\r\"Y\n\021RES_ATTACK_OBJECT\022\020\n\010att"
  "acker\030\001 \001(\004\022\020\n\010objectId\030\002 \001(\004\022\016\n\006damage\030"
  "\003 \001(\r\022\020\n\010remainHp\030\004 \001(\rb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 951, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 17,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class REQ_ENTER::_Internal {
 public:
};

REQ_ENTER::REQ_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.REQ_ENTER)
}
REQ_ENTER::REQ_ENTER(const REQ_ENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  REQ_ENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.REQ_ENTER)
}

inline void REQ_ENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

REQ_ENTER::~REQ_ENTER() {
  // @@protoc_insertion_point(destructor:Protocol.REQ_ENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void REQ_ENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void REQ_ENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void REQ_ENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.REQ_ENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* REQ_ENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.REQ_ENTER.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* REQ_ENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.REQ_ENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.REQ_ENTER.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.REQ_ENTER)
  return target;
}

size_t REQ_ENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.REQ_ENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData REQ_ENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    REQ_ENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*REQ_ENTER::GetClassData() const { return &_class_data_; }


void REQ_ENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<REQ_ENTER*>(&to_msg);
  auto& from = static_cast<const REQ_ENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.REQ_ENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void REQ_ENTER::CopyFrom(const REQ_ENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.REQ_ENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQ_ENTER::IsInitialized() const {
  return true;
}

void REQ_ENTER::InternalSwap(REQ_ENTER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata REQ_ENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class RES_ENTER::_Internal {
 public:
  static const ::Protocol::ObjectInfo& player(const RES_ENTER* msg);
};

const ::Protocol::ObjectInfo&
RES_ENTER::_Internal::player(const RES_ENTER* msg) {
  return *msg->_impl_.player_;
}
void RES_ENTER::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
RES_ENTER::RES_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_ENTER)
}
RES_ENTER::RES_ENTER(const RES_ENTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_ENTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_ENTER)
}

inline void RES_ENTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_ENTER::~RES_ENTER() {
  // @@protoc_insertion_point(destructor:Protocol.RES_ENTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_ENTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void RES_ENTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_ENTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_ENTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_ENTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ObjectInfo player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_ENTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_ENTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_ENTER)
  return target;
}

size_t RES_ENTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_ENTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_ENTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_ENTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_ENTER::GetClassData() const { return &_class_data_; }


void RES_ENTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_ENTER*>(&to_msg);
  auto& from = static_cast<const RES_ENTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_ENTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_ENTER::CopyFrom(const RES_ENTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_ENTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_ENTER::IsInitialized() const {
  return true;
}

void RES_ENTER::InternalSwap(RES_ENTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RES_ENTER, _impl_.success_)
      + sizeof(RES_ENTER::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(RES_ENTER, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_ENTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class REQ_ENTER_ROOM::_Internal {
 public:
};

REQ_ENTER_ROOM::REQ_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.REQ_ENTER_ROOM)
}
REQ_ENTER_ROOM::REQ_ENTER_ROOM(const REQ_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  REQ_ENTER_ROOM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.REQ_ENTER_ROOM)
}

inline void REQ_ENTER_ROOM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

REQ_ENTER_ROOM::~REQ_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.REQ_ENTER_ROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void REQ_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void REQ_ENTER_ROOM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void REQ_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.REQ_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* REQ_ENTER_ROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.REQ_ENTER_ROOM.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* REQ_ENTER_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.REQ_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.REQ_ENTER_ROOM.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.REQ_ENTER_ROOM)
  return target;
}

size_t REQ_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.REQ_ENTER_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData REQ_ENTER_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    REQ_ENTER_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*REQ_ENTER_ROOM::GetClassData() const { return &_class_data_; }


void REQ_ENTER_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<REQ_ENTER_ROOM*>(&to_msg);
  auto& from = static_cast<const REQ_ENTER_ROOM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.REQ_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void REQ_ENTER_ROOM::CopyFrom(const REQ_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.REQ_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQ_ENTER_ROOM::IsInitialized() const {
  return true;
}

void REQ_ENTER_ROOM::InternalSwap(REQ_ENTER_ROOM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata REQ_ENTER_ROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class RES_ENTER_ROOM::_Internal {
 public:
  static const ::Protocol::ObjectInfo& player(const RES_ENTER_ROOM* msg);
};

const ::Protocol::ObjectInfo&
RES_ENTER_ROOM::_Internal::player(const RES_ENTER_ROOM* msg) {
  return *msg->_impl_.player_;
}
void RES_ENTER_ROOM::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
RES_ENTER_ROOM::RES_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_ENTER_ROOM)
}
RES_ENTER_ROOM::RES_ENTER_ROOM(const RES_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_ENTER_ROOM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_ENTER_ROOM)
}

inline void RES_ENTER_ROOM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_ENTER_ROOM::~RES_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.RES_ENTER_ROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void RES_ENTER_ROOM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_ENTER_ROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ObjectInfo player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_ENTER_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_ENTER_ROOM)
  return target;
}

size_t RES_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_ENTER_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_ENTER_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_ENTER_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_ENTER_ROOM::GetClassData() const { return &_class_data_; }


void RES_ENTER_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_ENTER_ROOM*>(&to_msg);
  auto& from = static_cast<const RES_ENTER_ROOM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_ENTER_ROOM::CopyFrom(const RES_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_ENTER_ROOM::IsInitialized() const {
  return true;
}

void RES_ENTER_ROOM::InternalSwap(RES_ENTER_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RES_ENTER_ROOM, _impl_.success_)
      + sizeof(RES_ENTER_ROOM::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(RES_ENTER_ROOM, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_ENTER_ROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class REQ_LEAVE::_Internal {
 public:
};

REQ_LEAVE::REQ_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.REQ_LEAVE)
}
REQ_LEAVE::REQ_LEAVE(const REQ_LEAVE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  REQ_LEAVE* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.REQ_LEAVE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData REQ_LEAVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*REQ_LEAVE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata REQ_LEAVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class RES_LEAVE::_Internal {
 public:
  static const ::Protocol::ObjectInfo& object(const RES_LEAVE* msg);
};

const ::Protocol::ObjectInfo&
RES_LEAVE::_Internal::object(const RES_LEAVE* msg) {
  return *msg->_impl_.object_;
}
void RES_LEAVE::clear_object() {
  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
}
RES_LEAVE::RES_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_LEAVE)
}
RES_LEAVE::RES_LEAVE(const RES_LEAVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_LEAVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::Protocol::ObjectInfo(*from._impl_.object_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_LEAVE)
}

inline void RES_LEAVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_LEAVE::~RES_LEAVE() {
  // @@protoc_insertion_point(destructor:Protocol.RES_LEAVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_LEAVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.object_;
}

void RES_LEAVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_LEAVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_LEAVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.object_ != nullptr) {
    delete _impl_.object_;
  }
  _impl_.object_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_LEAVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ObjectInfo object = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_LEAVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_LEAVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_LEAVE)
  return target;
}

size_t RES_LEAVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_LEAVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo object = 1;
  if (this->_internal_has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_LEAVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_LEAVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_LEAVE::GetClassData() const { return &_class_data_; }


void RES_LEAVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_LEAVE*>(&to_msg);
  auto& from = static_cast<const RES_LEAVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_LEAVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_object()) {
    _this->_internal_mutable_object()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_object());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_LEAVE::CopyFrom(const RES_LEAVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_LEAVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_LEAVE::IsInitialized() const {
  return true;
}

void RES_LEAVE::InternalSwap(RES_LEAVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_, other->_impl_.object_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_LEAVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class RES_SPAWN::_Internal {
 public:
  static const ::Protocol::ObjectInfo& player(const RES_SPAWN* msg);
};

const ::Protocol::ObjectInfo&
RES_SPAWN::_Internal::player(const RES_SPAWN* msg) {
  return *msg->_impl_.player_;
}
void RES_SPAWN::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
RES_SPAWN::RES_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_SPAWN)
}
RES_SPAWN::RES_SPAWN(const RES_SPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_SPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.mine_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
  }
  _this->_impl_.mine_ = from._impl_.mine_;
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_SPAWN)
}

inline void RES_SPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.mine_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_SPAWN::~RES_SPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.RES_SPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_SPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void RES_SPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_SPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_SPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.mine_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_SPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ObjectInfo player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool mine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_SPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_SPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // bool mine = 2;
  if (this->_internal_mine() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_mine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_SPAWN)
  return target;
}

size_t RES_SPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_SPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool mine = 2;
  if (this->_internal_mine() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_SPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_SPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_SPAWN::GetClassData() const { return &_class_data_; }


void RES_SPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_SPAWN*>(&to_msg);
  auto& from = static_cast<const RES_SPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_SPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_player());
  }
  if (from._internal_mine() != 0) {
    _this->_internal_set_mine(from._internal_mine());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_SPAWN::CopyFrom(const RES_SPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_SPAWN::IsInitialized() const {
  return true;
}

void RES_SPAWN::InternalSwap(RES_SPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RES_SPAWN, _impl_.mine_)
      + sizeof(RES_SPAWN::_impl_.mine_)
      - PROTOBUF_FIELD_OFFSET(RES_SPAWN, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_SPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class RES_SPAWN_ALL::_Internal {
 public:
};

void RES_SPAWN_ALL::clear_players() {
  _impl_.players_.Clear();
}
RES_SPAWN_ALL::RES_SPAWN_ALL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_SPAWN_ALL)
}
RES_SPAWN_ALL::RES_SPAWN_ALL(const RES_SPAWN_ALL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_SPAWN_ALL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_SPAWN_ALL)
}

inline void RES_SPAWN_ALL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_SPAWN_ALL::~RES_SPAWN_ALL() {
  // @@protoc_insertion_point(destructor:Protocol.RES_SPAWN_ALL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_SPAWN_ALL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void RES_SPAWN_ALL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_SPAWN_ALL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_SPAWN_ALL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_SPAWN_ALL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ObjectInfo players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_SPAWN_ALL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_SPAWN_ALL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_SPAWN_ALL)
  return target;
}

size_t RES_SPAWN_ALL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_SPAWN_ALL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_SPAWN_ALL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_SPAWN_ALL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_SPAWN_ALL::GetClassData() const { return &_class_data_; }


void RES_SPAWN_ALL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_SPAWN_ALL*>(&to_msg);
  auto& from = static_cast<const RES_SPAWN_ALL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_SPAWN_ALL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_SPAWN_ALL::CopyFrom(const RES_SPAWN_ALL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_SPAWN_ALL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_SPAWN_ALL::IsInitialized() const {
  return true;
}

void RES_SPAWN_ALL::InternalSwap(RES_SPAWN_ALL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_SPAWN_ALL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class RES_DESPAWN::_Internal {
 public:
};

RES_DESPAWN::RES_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_DESPAWN)
}
RES_DESPAWN::RES_DESPAWN(const RES_DESPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_DESPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_DESPAWN)
}

inline void RES_DESPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_DESPAWN::~RES_DESPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.RES_DESPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_DESPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
}

void RES_DESPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_DESPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_DESPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_DESPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_DESPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_DESPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 ids = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_DESPAWN)
  return target;
}

size_t RES_DESPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_DESPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_DESPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_DESPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_DESPAWN::GetClassData() const { return &_class_data_; }


void RES_DESPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_DESPAWN*>(&to_msg);
  auto& from = static_cast<const RES_DESPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_DESPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_DESPAWN::CopyFrom(const RES_DESPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_DESPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_DESPAWN::IsInitialized() const {
  return true;
}

void RES_DESPAWN::InternalSwap(RES_DESPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_DESPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class RES_CHANGE_HP::_Internal {
 public:
};

RES_CHANGE_HP::RES_CHANGE_HP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_CHANGE_HP)
}
RES_CHANGE_HP::RES_CHANGE_HP(const RES_CHANGE_HP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_CHANGE_HP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objectid_, &from._impl_.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_CHANGE_HP)
}

inline void RES_CHANGE_HP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){uint64_t{0u}}
    , decltype(_impl_.hp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_CHANGE_HP::~RES_CHANGE_HP() {
  // @@protoc_insertion_point(destructor:Protocol.RES_CHANGE_HP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_CHANGE_HP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RES_CHANGE_HP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_CHANGE_HP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_CHANGE_HP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_CHANGE_HP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_CHANGE_HP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_CHANGE_HP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectid(), target);
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_CHANGE_HP)
  return target;
}

size_t RES_CHANGE_HP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_CHANGE_HP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectid());
  }

  // uint32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_CHANGE_HP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_CHANGE_HP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_CHANGE_HP::GetClassData() const { return &_class_data_; }


void RES_CHANGE_HP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_CHANGE_HP*>(&to_msg);
  auto& from = static_cast<const RES_CHANGE_HP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_CHANGE_HP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_CHANGE_HP::CopyFrom(const RES_CHANGE_HP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_CHANGE_HP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_CHANGE_HP::IsInitialized() const {
  return true;
}

void RES_CHANGE_HP::InternalSwap(RES_CHANGE_HP* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RES_CHANGE_HP, _impl_.hp_)
      + sizeof(RES_CHANGE_HP::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(RES_CHANGE_HP, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_CHANGE_HP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class RES_DIE::_Internal {
 public:
};

RES_DIE::RES_DIE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_DIE)
}
RES_DIE::RES_DIE(const RES_DIE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_DIE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){}
    , decltype(_impl_.attacker_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objectid_, &from._impl_.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attacker_) -
    reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.attacker_));
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_DIE)
}

inline void RES_DIE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectid_){uint64_t{0u}}
    , decltype(_impl_.attacker_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_DIE::~RES_DIE() {
  // @@protoc_insertion_point(destructor:Protocol.RES_DIE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_DIE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RES_DIE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_DIE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_DIE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attacker_) -
      reinterpret_cast<char*>(&_impl_.objectid_)) + sizeof(_impl_.attacker_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_DIE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 objectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 attacker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_DIE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_DIE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 objectId = 1;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectid(), target);
  }

  // uint64 attacker = 2;
  if (this->_internal_attacker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_attacker(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_DIE)
  return target;
}

size_t RES_DIE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_DIE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 objectId = 1;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectid());
  }

  // uint64 attacker = 2;
  if (this->_internal_attacker() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_attacker());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_DIE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_DIE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_DIE::GetClassData() const { return &_class_data_; }


void RES_DIE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_DIE*>(&to_msg);
  auto& from = static_cast<const RES_DIE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_DIE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_attacker() != 0) {
    _this->_internal_set_attacker(from._internal_attacker());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_DIE::CopyFrom(const RES_DIE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_DIE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_DIE::IsInitialized() const {
  return true;
}

void RES_DIE::InternalSwap(RES_DIE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RES_DIE, _impl_.attacker_)
      + sizeof(RES_DIE::_impl_.attacker_)
      - PROTOBUF_FIELD_OFFSET(RES_DIE, _impl_.objectid_)>(
          reinterpret_cast<char*>(&_impl_.objectid_),
          reinterpret_cast<char*>(&other->_impl_.objectid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_DIE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class REQ_MOVE::_Internal {
 public:
  static const ::Protocol::PositionInfo& info(const REQ_MOVE* msg);
};

const ::Protocol::PositionInfo&
REQ_MOVE::_Internal::info(const REQ_MOVE* msg) {
  return *msg->_impl_.info_;
}
void REQ_MOVE::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
REQ_MOVE::REQ_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.REQ_MOVE)
}
REQ_MOVE::REQ_MOVE(const REQ_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  REQ_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Protocol::PositionInfo(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.REQ_MOVE)
}

inline void REQ_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

REQ_MOVE::~REQ_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.REQ_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void REQ_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void REQ_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void REQ_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.REQ_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* REQ_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PositionInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* REQ_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.REQ_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PositionInfo info = 1;
  if (this->_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.REQ_MOVE)
  return target;
}

size_t REQ_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.REQ_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PositionInfo info = 1;
  if (this->_internal_has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData REQ_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    REQ_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*REQ_MOVE::GetClassData() const { return &_class_data_; }


void REQ_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<REQ_MOVE*>(&to_msg);
  auto& from = static_cast<const REQ_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.REQ_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_info()) {
    _this->_internal_mutable_info()->::Protocol::PositionInfo::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void REQ_MOVE::CopyFrom(const REQ_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.REQ_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQ_MOVE::IsInitialized() const {
  return true;
}

void REQ_MOVE::InternalSwap(REQ_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.info_, other->_impl_.info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata REQ_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class RES_MOVE::_Internal {
 public:
  static const ::Protocol::ObjectInfo& player(const RES_MOVE* msg);
};

const ::Protocol::ObjectInfo&
RES_MOVE::_Internal::player(const RES_MOVE* msg) {
  return *msg->_impl_.player_;
}
void RES_MOVE::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
RES_MOVE::RES_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_MOVE)
}
RES_MOVE::RES_MOVE(const RES_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_MOVE)
}

inline void RES_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_MOVE::~RES_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.RES_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void RES_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ObjectInfo player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_MOVE)
  return target;
}

size_t RES_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_MOVE::GetClassData() const { return &_class_data_; }


void RES_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_MOVE*>(&to_msg);
  auto& from = static_cast<const RES_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_MOVE::CopyFrom(const RES_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_MOVE::IsInitialized() const {
  return true;
}

void RES_MOVE::InternalSwap(RES_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_, other->_impl_.player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class RES_SPAWN_MONSTER::_Internal {
 public:
};

void RES_SPAWN_MONSTER::clear_monsters() {
  _impl_.monsters_.Clear();
}
RES_SPAWN_MONSTER::RES_SPAWN_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_SPAWN_MONSTER)
}
RES_SPAWN_MONSTER::RES_SPAWN_MONSTER(const RES_SPAWN_MONSTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_SPAWN_MONSTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monsters_){from._impl_.monsters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_SPAWN_MONSTER)
}

inline void RES_SPAWN_MONSTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monsters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_SPAWN_MONSTER::~RES_SPAWN_MONSTER() {
  // @@protoc_insertion_point(destructor:Protocol.RES_SPAWN_MONSTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_SPAWN_MONSTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.monsters_.~RepeatedPtrField();
}

void RES_SPAWN_MONSTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_SPAWN_MONSTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_SPAWN_MONSTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.monsters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_SPAWN_MONSTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ObjectInfo monsters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_monsters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_SPAWN_MONSTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_SPAWN_MONSTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo monsters = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_monsters_size()); i < n; i++) {
    const auto& repfield = this->_internal_monsters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_SPAWN_MONSTER)
  return target;
}

size_t RES_SPAWN_MONSTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_SPAWN_MONSTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo monsters = 1;
  total_size += 1UL * this->_internal_monsters_size();
  for (const auto& msg : this->_impl_.monsters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_SPAWN_MONSTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_SPAWN_MONSTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_SPAWN_MONSTER::GetClassData() const { return &_class_data_; }


void RES_SPAWN_MONSTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_SPAWN_MONSTER*>(&to_msg);
  auto& from = static_cast<const RES_SPAWN_MONSTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_SPAWN_MONSTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.monsters_.MergeFrom(from._impl_.monsters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_SPAWN_MONSTER::CopyFrom(const RES_SPAWN_MONSTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_SPAWN_MONSTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_SPAWN_MONSTER::IsInitialized() const {
  return true;
}

void RES_SPAWN_MONSTER::InternalSwap(RES_SPAWN_MONSTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.monsters_.InternalSwap(&other->_impl_.monsters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_SPAWN_MONSTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class RES_MOVE_MONSTER::_Internal {
 public:
  static const ::Protocol::ObjectInfo& monster(const RES_MOVE_MONSTER* msg);
};

const ::Protocol::ObjectInfo&
RES_MOVE_MONSTER::_Internal::monster(const RES_MOVE_MONSTER* msg) {
  return *msg->_impl_.monster_;
}
void RES_MOVE_MONSTER::clear_monster() {
  if (GetArenaForAllocation() == nullptr && _impl_.monster_ != nullptr) {
    delete _impl_.monster_;
  }
  _impl_.monster_ = nullptr;
}
RES_MOVE_MONSTER::RES_MOVE_MONSTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_MOVE_MONSTER)
}
RES_MOVE_MONSTER::RES_MOVE_MONSTER(const RES_MOVE_MONSTER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_MOVE_MONSTER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monster_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_monster()) {
    _this->_impl_.monster_ = new ::Protocol::ObjectInfo(*from._impl_.monster_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_MOVE_MONSTER)
}

inline void RES_MOVE_MONSTER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monster_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_MOVE_MONSTER::~RES_MOVE_MONSTER() {
  // @@protoc_insertion_point(destructor:Protocol.RES_MOVE_MONSTER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_MOVE_MONSTER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.monster_;
}

void RES_MOVE_MONSTER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_MOVE_MONSTER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_MOVE_MONSTER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.monster_ != nullptr) {
    delete _impl_.monster_;
  }
  _impl_.monster_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_MOVE_MONSTER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ObjectInfo monster = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_monster(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_MOVE_MONSTER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_MOVE_MONSTER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ObjectInfo monster = 1;
  if (this->_internal_has_monster()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::monster(this),
        _Internal::monster(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_MOVE_MONSTER)
  return target;
}

size_t RES_MOVE_MONSTER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_MOVE_MONSTER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo monster = 1;
  if (this->_internal_has_monster()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.monster_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_MOVE_MONSTER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_MOVE_MONSTER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_MOVE_MONSTER::GetClassData() const { return &_class_data_; }


void RES_MOVE_MONSTER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_MOVE_MONSTER*>(&to_msg);
  auto& from = static_cast<const RES_MOVE_MONSTER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_MOVE_MONSTER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_monster()) {
    _this->_internal_mutable_monster()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_monster());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_MOVE_MONSTER::CopyFrom(const RES_MOVE_MONSTER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_MOVE_MONSTER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_MOVE_MONSTER::IsInitialized() const {
  return true;
}

void RES_MOVE_MONSTER::InternalSwap(RES_MOVE_MONSTER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.monster_, other->_impl_.monster_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_MOVE_MONSTER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class REQ_ATTACK_OBJECT::_Internal {
 public:
};

REQ_ATTACK_OBJECT::REQ_ATTACK_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.REQ_ATTACK_OBJECT)
}
REQ_ATTACK_OBJECT::REQ_ATTACK_OBJECT(const REQ_ATTACK_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  REQ_ATTACK_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attacker_){}
    , decltype(_impl_.objectid_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.attacker_, &from._impl_.attacker_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.attacker_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:Protocol.REQ_ATTACK_OBJECT)
}

inline void REQ_ATTACK_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attacker_){uint64_t{0u}}
    , decltype(_impl_.objectid_){uint64_t{0u}}
    , decltype(_impl_.damage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

REQ_ATTACK_OBJECT::~REQ_ATTACK_OBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.REQ_ATTACK_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void REQ_ATTACK_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void REQ_ATTACK_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void REQ_ATTACK_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.REQ_ATTACK_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.attacker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.attacker_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* REQ_ATTACK_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 attacker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 objectId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* REQ_ATTACK_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.REQ_ATTACK_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 attacker = 1;
  if (this->_internal_attacker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_attacker(), target);
  }

  // uint64 objectId = 2;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_objectid(), target);
  }

  // uint32 damage = 3;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.REQ_ATTACK_OBJECT)
  return target;
}

size_t REQ_ATTACK_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.REQ_ATTACK_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 attacker = 1;
  if (this->_internal_attacker() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_attacker());
  }

  // uint64 objectId = 2;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectid());
  }

  // uint32 damage = 3;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData REQ_ATTACK_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    REQ_ATTACK_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*REQ_ATTACK_OBJECT::GetClassData() const { return &_class_data_; }


void REQ_ATTACK_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<REQ_ATTACK_OBJECT*>(&to_msg);
  auto& from = static_cast<const REQ_ATTACK_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.REQ_ATTACK_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_attacker() != 0) {
    _this->_internal_set_attacker(from._internal_attacker());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void REQ_ATTACK_OBJECT::CopyFrom(const REQ_ATTACK_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.REQ_ATTACK_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQ_ATTACK_OBJECT::IsInitialized() const {
  return true;
}

void REQ_ATTACK_OBJECT::InternalSwap(REQ_ATTACK_OBJECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(REQ_ATTACK_OBJECT, _impl_.damage_)
      + sizeof(REQ_ATTACK_OBJECT::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(REQ_ATTACK_OBJECT, _impl_.attacker_)>(
          reinterpret_cast<char*>(&_impl_.attacker_),
          reinterpret_cast<char*>(&other->_impl_.attacker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata REQ_ATTACK_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class RES_ATTACK_OBJECT::_Internal {
 public:
};

RES_ATTACK_OBJECT::RES_ATTACK_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.RES_ATTACK_OBJECT)
}
RES_ATTACK_OBJECT::RES_ATTACK_OBJECT(const RES_ATTACK_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RES_ATTACK_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attacker_){}
    , decltype(_impl_.objectid_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.remainhp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.attacker_, &from._impl_.attacker_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.remainhp_) -
    reinterpret_cast<char*>(&_impl_.attacker_)) + sizeof(_impl_.remainhp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.RES_ATTACK_OBJECT)
}

inline void RES_ATTACK_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attacker_){uint64_t{0u}}
    , decltype(_impl_.objectid_){uint64_t{0u}}
    , decltype(_impl_.damage_){0u}
    , decltype(_impl_.remainhp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RES_ATTACK_OBJECT::~RES_ATTACK_OBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.RES_ATTACK_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RES_ATTACK_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RES_ATTACK_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RES_ATTACK_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.RES_ATTACK_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.attacker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.remainhp_) -
      reinterpret_cast<char*>(&_impl_.attacker_)) + sizeof(_impl_.remainhp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RES_ATTACK_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 attacker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.attacker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 objectId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 remainHp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.remainhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RES_ATTACK_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.RES_ATTACK_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 attacker = 1;
  if (this->_internal_attacker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_attacker(), target);
  }

  // uint64 objectId = 2;
  if (this->_internal_objectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_objectid(), target);
  }

  // uint32 damage = 3;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_damage(), target);
  }

  // uint32 remainHp = 4;
  if (this->_internal_remainhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_remainhp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.RES_ATTACK_OBJECT)
  return target;
}

size_t RES_ATTACK_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.RES_ATTACK_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 attacker = 1;
  if (this->_internal_attacker() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_attacker());
  }

  // uint64 objectId = 2;
  if (this->_internal_objectid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectid());
  }

  // uint32 damage = 3;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
  }

  // uint32 remainHp = 4;
  if (this->_internal_remainhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_remainhp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RES_ATTACK_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RES_ATTACK_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RES_ATTACK_OBJECT::GetClassData() const { return &_class_data_; }


void RES_ATTACK_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RES_ATTACK_OBJECT*>(&to_msg);
  auto& from = static_cast<const RES_ATTACK_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.RES_ATTACK_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_attacker() != 0) {
    _this->_internal_set_attacker(from._internal_attacker());
  }
  if (from._internal_objectid() != 0) {
    _this->_internal_set_objectid(from._internal_objectid());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_remainhp() != 0) {
    _this->_internal_set_remainhp(from._internal_remainhp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RES_ATTACK_OBJECT::CopyFrom(const RES_ATTACK_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.RES_ATTACK_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RES_ATTACK_OBJECT::IsInitialized() const {
  return true;
}

void RES_ATTACK_OBJECT::InternalSwap(RES_ATTACK_OBJECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RES_ATTACK_OBJECT, _impl_.remainhp_)
      + sizeof(RES_ATTACK_OBJECT::_impl_.remainhp_)
      - PROTOBUF_FIELD_OFFSET(RES_ATTACK_OBJECT, _impl_.attacker_)>(
          reinterpret_cast<char*>(&_impl_.attacker_),
          reinterpret_cast<char*>(&other->_impl_.attacker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RES_ATTACK_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::REQ_ENTER*
Arena::CreateMaybeMessage< ::Protocol::REQ_ENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::REQ_ENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_ENTER*
Arena::CreateMaybeMessage< ::Protocol::RES_ENTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_ENTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::REQ_ENTER_ROOM*
Arena::CreateMaybeMessage< ::Protocol::REQ_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::REQ_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_ENTER_ROOM*
Arena::CreateMaybeMessage< ::Protocol::RES_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::REQ_LEAVE*
Arena::CreateMaybeMessage< ::Protocol::REQ_LEAVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::REQ_LEAVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_LEAVE*
Arena::CreateMaybeMessage< ::Protocol::RES_LEAVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_LEAVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_SPAWN*
Arena::CreateMaybeMessage< ::Protocol::RES_SPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_SPAWN_ALL*
Arena::CreateMaybeMessage< ::Protocol::RES_SPAWN_ALL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_SPAWN_ALL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_DESPAWN*
Arena::CreateMaybeMessage< ::Protocol::RES_DESPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_DESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_CHANGE_HP*
Arena::CreateMaybeMessage< ::Protocol::RES_CHANGE_HP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_CHANGE_HP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_DIE*
Arena::CreateMaybeMessage< ::Protocol::RES_DIE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_DIE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::REQ_MOVE*
Arena::CreateMaybeMessage< ::Protocol::REQ_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::REQ_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_MOVE*
Arena::CreateMaybeMessage< ::Protocol::RES_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_SPAWN_MONSTER*
Arena::CreateMaybeMessage< ::Protocol::RES_SPAWN_MONSTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_SPAWN_MONSTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_MOVE_MONSTER*
Arena::CreateMaybeMessage< ::Protocol::RES_MOVE_MONSTER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_MOVE_MONSTER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::REQ_ATTACK_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::REQ_ATTACK_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::REQ_ATTACK_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::RES_ATTACK_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::RES_ATTACK_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::RES_ATTACK_OBJECT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
